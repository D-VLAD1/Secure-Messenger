from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QPushButton, QVBoxLayout,
    QWidget, QLabel
)
import inspect
from radon.complexity import cc_visit
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import sys

# –§—ñ–∫—Ç–∏–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
iters = 20
key_len = "10**50"
rsa_time = 0.016384208202362062
elg_time = 2.605035674571991
algorithms = ['RSA', 'ElGamal']
gen_times = [rsa_time, elg_time]

class PlotWindow(QWidget):
    def __init__(self, title, x_data, y_data, ylabel, footer_text=None):
        super().__init__()
        self.setWindowTitle(title)
        layout = QVBoxLayout()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        fig = Figure(figsize=(5, 4))
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        ax.bar(x_data, y_data)
        ax.set_ylabel(ylabel)
        ax.set_title(title)

        if footer_text:
            fig.text(0.5, 0.01, footer_text, ha='center', fontsize=10)
        layout.addWidget(canvas)
        self.setLayout(layout)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê–Ω–∞–ª—ñ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è")
        self.setGeometry(200, 200, 400, 300)

        layout = QVBoxLayout()

        self.label = QLabel("–û–±–µ—Ä—ñ—Ç—å, —â–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏:")
        layout.addWidget(self.label)

        self.gen_btn = QPushButton("–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤")
        self.gen_btn.clicked.connect(self.show_gen_time)
        layout.addWidget(self.gen_btn)

        self.enc_btn = QPushButton("–ß–∞—Å —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è/–¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è")
        self.enc_btn.clicked.connect(self.show_enc_time)
        layout.addWidget(self.enc_btn)

        self.sec_btn = QPushButton("–ë–µ–∑–ø–µ–∫–∞")
        self.sec_btn.clicked.connect(self.show_security_info)
        layout.addWidget(self.sec_btn)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

    def show_gen_time(self):
        footer = "–ú–æ–∂–µ–º –±–∞—á–∏—Ç–∏, —â–æ Elgamal –Ω–∞–π–¥–æ–≤—à–µ –≥–µ–Ω–µ—Ä—É—î –∫–ª—é—á—ñ.\n –¶–µ –∑–∞–≥–∞–ª–æ–º\
 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º—É –ø–æ—à—É–∫—É –ø–µ—Ä–≤—ñ—Å–Ω–∏—Ö –∫–æ—Ä–µ–Ω—ñ–≤ –∑–∞ mod –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞"
        self.plot_window = PlotWindow(
            f"–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ —Ä–æ–∑–º—ñ—Ä—É ~{key_len} –Ω–∞ {iters} —ñ—Ç–µ—Ä–∞—Ü—ñ—è—Ö",
            algorithms, gen_times, "–ß–∞—Å (—Å)", footer
        )
        self.plot_window.show()

    def show_enc_time(self):
        # –ü—Ä–∏–∫–ª–∞–¥ –∑ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        enc_times = [0.01, 0.009, 0.012, 0.003]
        self.plot_window = PlotWindow("–ß–∞—Å —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è", algorithms, enc_times, "–ß–∞—Å (—Å)")
        self.plot_window.show()



    def evaluate_simplicity(self, algo_func):
        """
        –û–±—á–∏—Å–ª—é—î —É–º–æ–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø—Ä–æ—Å—Ç–æ—Ç–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:
        - –º–µ–Ω—à–µ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        - –Ω–∏–∂—á–∞ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        - –º–µ–Ω—à–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (import) ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        - –º–µ–Ω—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        """
        source = inspect.getsource(algo_func)
        lines = len(source.splitlines())
        complexity = cc_visit(source)[0].complexity if cc_visit(source) else 1
        imports = sum(1 for line in source.splitlines() if 'import' in line)
        args = algo_func.__code__.co_argcount

        # Normalization (based on assumed max reasonable values)
        norm_lines = lines / 100     # 100 lines = max
        norm_complexity = complexity / 10  # 10 = very complex
        norm_imports = imports / 5   # 5 imports = high
        norm_args = args / 6         # 6+ arguments = complex interface

        # Clamp values to [0, 1]
        norm_lines = min(norm_lines, 1)
        norm_complexity = min(norm_complexity, 1)
        norm_imports = min(norm_imports, 1)
        norm_args = min(norm_args, 1)

        # Weighted average
        simplicity_score = (
            0.4 * norm_lines +
            0.3 * norm_complexity +
            0.2 * norm_imports +
            0.1 * norm_args
        )

        return simplicity_score  # –ß–∏–º –º–µ–Ω—à–µ ‚Äî —Ç–∏–º –ø—Ä–æ—Å—Ç—ñ—à–µ

    def evaluate_flexibility(self, algo_func):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏"""
        return algo_func.__code__.co_argcount


    def evaluate_security(self, name):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω—É –±–µ–∑–ø–µ–∫—É –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
        if name == 'ECC':
            return {
                'bit_strength': 128,
                'key_size': 256,
                'quantum_resistant': False,
                'hard_problem': 'Elliptic Curve Discrete Logarithm Problem (ECDLP)'
            }
        elif name == 'Rabin':
            return {
                'bit_strength': 112,
                'key_size': 2048,
                'quantum_resistant': False,
                'hard_problem': 'Integer Factorization Problem'
            }
        elif name == 'ElGamal':
            return {
                'bit_strength': 80,
                'key_size': 1024,
                'quantum_resistant': False,
                'hard_problem': 'Discrete Logarithm Problem (DLP)'
            }
        else:
            return {
                'bit_strength': 0,
                'key_size': 0,
                'quantum_resistant': False,
                'hard_problem': 'Unknown'
            }

    def show_security_info(self):
        from Rabin.rabin import encrypt
        from ECC.utils import transform_msg
        from ELGamal.utils import encode_message

        algorithms = ['Rabin', 'ECC', 'ElGamal']
        funcs = {
            'Rabin': encrypt,
            'ECC': transform_msg,
            'ElGamal': encode_message
        }

        simplicity = [self.evaluate_simplicity(funcs[name]) for name in algorithms]
        flexibility = [self.evaluate_flexibility(funcs[name]) for name in algorithms]
        security_data = [self.evaluate_security(name) for name in algorithms]

        bit_strengths = [data['bit_strength'] for data in security_data]
        key_sizes = [data['key_size'] for data in security_data]
        summary_text = (
    "üîπ Rabin –º–∞—î –Ω–∞–π–º–µ–Ω—à—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥ —Ç—Ä—å–æ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –∑–∞–≤–¥—è–∫–∏ –ø—Ä–æ—Å—Ç–æ—Ç—ñ –∫–æ–¥—É, –Ω–∏–∑—å–∫—ñ–π —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–Ω—ñ–π "
    "—Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º. –ô–æ–≥–æ –≥–Ω—É—á–∫—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, –∞–ª–µ –≤—ñ–Ω "
    "–∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∏—Å–æ–∫—É –∫—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å –ø—Ä–∏ –≤–µ–ª–∏–∫–∏—Ö —Ä–æ–∑–º—ñ—Ä–∞—Ö –∫–ª—é—á—ñ–≤ (2048 –±—ñ—Ç).\n\n"
    
    "üîπ ECC (–µ–ª—ñ–ø—Ç–∏—á–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è) –º–∞—î –ø–æ–º—ñ—Ä–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–ø–∞—Ä–∞—Ç. –í–æ–¥–Ω–æ—á–∞—Å –≤–æ–Ω–∞ "
    "—î –¥—É–∂–µ –≥–Ω—É—á–∫–æ—é ‚Äî –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç–∏–ø–∏ –∫—Ä–∏–≤–∏—Ö, –ø–æ–ª—è —Ç–∞ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏. –ü—Ä–∏ —Ü—å–æ–º—É ECC –∑–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞–π–≤–∏—â—É –∫—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å "
    "—Å–µ—Ä–µ–¥ —É—Å—ñ—Ö —Ç—Ä—å–æ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –Ω–µ–≤–µ–ª–∏–∫–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ –∫–ª—é—á–∞ (256 –±—ñ—Ç).\n\n"
    
    "üîπ ElGamal –º–∞—î –Ω–∞–π–≤–∏—â—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à –æ–±‚Äô—î–º–Ω–æ–≥–æ —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ–≥–æ –∫–æ–¥—É. –ü—Ä–æ—Ç–µ –≤—ñ–Ω –Ω–∞–π–±—ñ–ª—å—à –≥–Ω—É—á–∫–∏–π ‚Äî "
    "–ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–º—ñ–Ω—É –±–∞–≥–∞—Ç—å–æ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —Ç–∞–∫–∏—Ö —è–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≥—Ä—É–ø–∞ —Ç–æ—â–æ. –ô–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å –Ω–∏–∂—á–∞ –∑–∞ ECC —ñ Rabin –ø—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —É–º–æ–≤–∞—Ö, "
    "–æ—Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–≤—à–∏—Ö –∫–ª—é—á—ñ–≤ (–∑–∞–∑–≤–∏—á–∞–π 1024 –±—ñ—Ç–∏) –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Å—Ö–æ–∂–æ–≥–æ —Ä—ñ–≤–Ω—è –±–µ–∑–ø–µ–∫–∏."
)
        # Set up layout: 3 plots in row + 1 text block below
        fig = plt.figure(figsize=(15, 10))
        gs = gridspec.GridSpec(2, 3, height_ratios=[4, 1.2])  # more space to plots, less to text

        # Plot 1: Simplicity
        ax1 = fig.add_subplot(gs[0, 0])
        ax1.bar(algorithms, simplicity, color='skyblue')
        ax1.set_title("–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        ax1.set_ylabel("–Ü–Ω–¥–µ–∫—Å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ")
        ax1.grid(axis='y')

        # Plot 2: Flexibility
        ax2 = fig.add_subplot(gs[0, 1])
        ax2.bar(algorithms, flexibility, color='lightgreen')
        ax2.set_title("–ì–Ω—É—á–∫—ñ—Å—Ç—å")
        ax2.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤")
        ax2.grid(axis='y')

        # Plot 3: Security
        ax3 = fig.add_subplot(gs[0, 2])
        ax3.bar(algorithms, bit_strengths, color='salmon')
        ax3.set_title("–ö—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å")
        ax3.set_ylabel("–ë—ñ—Ç–∏ –±–µ–∑–ø–µ–∫–∏")
        ax3.grid(axis='y')

        # Summary Text Block
        ax_text = fig.add_subplot(gs[1, :])
        ax_text.axis('off')
        ax_text.text(0.5, 0.5, summary_text, ha='center', va='center', wrap=True, fontsize=10, family='monospace')

        # Move everything upward
        fig.subplots_adjust(top=0.93, bottom=0.08, hspace=0.5)
        fig.suptitle("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤", fontsize=16)
        plt.show()

        
            # SINGLE TEXT BLOCK
        ax_text = fig.add_subplot(gs[1, :])
        ax_text.axis('off')
        ax_text.text(0.5, 0.5, summary_text, ha='center', va='center', wrap=True, fontsize=10, family='monospace')

        fig.suptitle("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤", fontsize=16)
        plt.tight_layout(rect=[0, 0, 1, 0.95])
        plt.show()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
