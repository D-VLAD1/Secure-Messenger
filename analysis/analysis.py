from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QPushButton, QVBoxLayout,
    QWidget, QLabel
)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import sys
import inspect
from radon.complexity import cc_visit

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
iters = 100
key_len = "10**50"
rsa_time = 0.015076885223388672
elg_time = 1.276200224309702876
rabin_time = 0.03366813182830811
ecc_time = 0.049496512413024905
algorithms = ['RSA', 'ElGamal', "Rabin", "ECC"]
gen_times = [rsa_time, elg_time, rabin_time, ecc_time]

# –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
iters = 100
message = "Test message for checking encoding and decoding speed"
rsa_enc_time = 0.00001367330551147461
elg_enc_time = 0.0003565835952758789
rabin_enc_time = 0.0000096106529
ecc_enc_time = 6.926059722900391e-06

# –î–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
rsa_dec_time = 0.0015830945968627929
elg_dec_time = 0.0003760385513305664
rabin_dec_time = 0.0013728952407836914
ecc_dec_time = 5.47647476196289e-06


class PlotWindow(QWidget):
    def __init__(self, title, x_data, y_data, ylabel, footer_text=None):
        super().__init__()
        self.setWindowTitle(title)
        layout = QVBoxLayout()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        self.resize(800, 600)
        fig = Figure(figsize=(4, 3))
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        ax.bar(x_data, y_data)

      # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞–¥ –∫–æ–∂–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º
        for i, v in enumerate(y_data):
            ax.text(i, v + max(y_data) * 0.01, f"{v:.7f}", ha='center', va='bottom', fontsize=9)

        ax.set_ylabel(ylabel)
        ax.set_title(title)

        if footer_text:
            fig.text(0.5, 0.01, footer_text, ha='center', fontsize=10)
        layout.addWidget(canvas)
        self.setLayout(layout)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê–Ω–∞–ª—ñ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è")
        self.resize(600, 200)

        layout = QVBoxLayout()

        self.label = QLabel("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏:")
        self.label.setAlignment(Qt.AlignmentFlag.AlignHCenter)  # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        self.label.setFont(QFont("Arial", 18))
        layout.addWidget(self.label)

        self.gen_btn = QPushButton("–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤")
        self.gen_btn.clicked.connect(self.show_gen_time)
        layout.addWidget(self.gen_btn)

        self.enc_btn = QPushButton("–ß–∞—Å —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è/–¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è")
        self.enc_btn.clicked.connect(self.show_enc_time)
        layout.addWidget(self.enc_btn)

        self.sec_btn = QPushButton("–ë–µ–∑–ø–µ–∫–∞")
        self.sec_btn.clicked.connect(self.show_security_info)
        layout.addWidget(self.sec_btn)

        self.ecc_btn = QPushButton("–ü—Ä–æ ECC")
        self.ecc_btn.clicked.connect(self.show_ecc_info)
        layout.addWidget(self.ecc_btn)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

    def show_gen_time(self):
        footer = "RSA - –®–≤–∏–¥–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2 –ø—Ä–æ—Å—Ç–∏—Ö p, q\n" \
 "Elgamal - –Ω–∞–π–¥–æ–≤—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º—É –ø–æ—à—É–∫—É –ø–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∫–æ—Ä–µ–Ω—è g –∑–∞ mod p.\n" \
 "Rabin - –ø–æ–¥—ñ–±–Ω–æ –¥–æ RSA, –∞–ª–µ –∑ —É–º–æ–≤–æ—é —â–æ p ‚â° q ‚â° 3mod4.\n" \
 "ECC - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≥—Ä—É–ø–∏, —Ç–æ—á–∫–∏ —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–Ω–æ–∂–µ–Ω–Ω—è –∑–∞–π–º–∞—î –Ω–µ–±–∞–≥–∞—Ç–æ —á–∞—Å—É"
        self.plot_window = PlotWindow(
            f"–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ —Ä–æ–∑–º—ñ—Ä—É ~{key_len} –Ω–∞ 100 —ñ—Ç–µ—Ä–∞—Ü—ñ—è—Ö",
            algorithms, gen_times, "–ß–∞—Å (—Å)", footer
        )
        self.plot_window.show()

    def show_enc_time(self):
        enc_times = [rsa_enc_time, elg_enc_time, rabin_enc_time, ecc_enc_time]
        dec_times = [rsa_dec_time, elg_dec_time, rabin_dec_time, ecc_dec_time]

        # –ì—Ä–∞—Ñ—ñ–∫ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        enc_footer = "RSA - —à–≤–∏–¥–∫–æ, c = m^e mod n\n" \
        "Elgamal - –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ, –±–æ –ø—Ä–∞—Ü—é—î –∑ –¥–≤–æ–º–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ c1 = g^k modp, c2 = y^k*m modp –∑ –≤–µ–ª–∏–∫–∏–º k\n" \
        "Rabin - –Ω–∞–π—à–≤–∏–¥—à–µ, –≤—Å—å–æ–≥–æ–ª–∏—à –≤–∏–∫–æ–Ω–∞—Ç–∏ c = m^2 modn\n" \
        "ECC - –Ω–∞–π—à–≤–∏–¥—à–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è"
        self.plot_enc_window = PlotWindow(
            f"–ß–∞—Å —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n m:'{message}'",
            algorithms,
            enc_times,
            "–ß–∞—Å (—Å)",
            enc_footer
        )
        self.plot_enc_window.show()

        # –ì—Ä–∞—Ñ—ñ–∫ –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        dec_footer = "RSA - –ø–æ–≤—ñ–ª—å–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤–µ–ª–∏–∫–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ d\n" \
        "Elgamal - –≤—Å—å–æ–≥–æ –º–µ–Ω—à–µ –æ–±—á–∏—Å–ª–µ–Ω—å –Ω—ñ–∂ —É RSA\n" \
        "Rabin - –Ω–µ –Ω–∞–π–∫—Ä–∞—â–∏–π —á–µ—Ä–µ–∑ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑—Ä–∞–∑—É —á–æ—Ç–∏—Ä—å–æ—Ö –∫–æ—Ä–µ–Ω—ñ–≤ —ñ–∑ —è–∫–∏—Ö –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π\n" \
        "ECC - –Ω–∞–π—à–≤–∏–¥—à–µ, –±–æ –Ω–µ–±–∞–≥–∞—Ç–æ –≤–∞–∂–∫–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å"
        self.plot_dec_window = PlotWindow(
            f"–ß–∞—Å –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n m:'{message}'",
            algorithms,
            dec_times,
            "–ß–∞—Å (—Å)",
            dec_footer
        )
        self.plot_dec_window.show()



    def evaluate_simplicity(self, algo_func):
        """
        –û–±—á–∏—Å–ª—é—î —É–º–æ–≤–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø—Ä–æ—Å—Ç–æ—Ç–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:
        - –º–µ–Ω—à–µ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        - –Ω–∏–∂—á–∞ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        - –º–µ–Ω—à–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (import) ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        - –º–µ–Ω—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç—ñ—à–µ
        """
        source = inspect.getsource(algo_func)
        lines = len(source.splitlines())
        complexity = cc_visit(source)[0].complexity if cc_visit(source) else 1
        imports = sum(1 for line in source.splitlines() if 'import' in line)
        args = algo_func.__code__.co_argcount

        # Normalization (based on assumed max reasonable values)
        norm_lines = lines / 100     # 100 lines = max
        norm_complexity = complexity / 10  # 10 = very complex
        norm_imports = imports / 5   # 5 imports = high
        norm_args = args / 6         # 6+ arguments = complex interface

        # Clamp values to [0, 1]
        norm_lines = min(norm_lines, 1)
        norm_complexity = min(norm_complexity, 1)
        norm_imports = min(norm_imports, 1)
        norm_args = min(norm_args, 1)

        # Weighted average
        simplicity_score = (
            0.4 * norm_lines +
            0.3 * norm_complexity +
            0.2 * norm_imports +
            0.1 * norm_args
        )

        return simplicity_score  # –ß–∏–º –º–µ–Ω—à–µ ‚Äî —Ç–∏–º –ø—Ä–æ—Å—Ç—ñ—à–µ

    def evaluate_flexibility(self, algo_func):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏"""
        return algo_func.__code__.co_argcount


    def evaluate_security(self, name):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω—É –±–µ–∑–ø–µ–∫—É –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
        if name == 'ECC':
            return {
                'bit_strength': 128,
                'key_size': 256,
                'quantum_resistant': False,
                'hard_problem': 'Elliptic Curve Discrete Logarithm Problem (ECDLP)'
            }
        elif name == 'Rabin':
            return {
                'bit_strength': 112,
                'key_size': 2048,
                'quantum_resistant': False,
                'hard_problem': 'Integer Factorization Problem'
            }
        elif name == 'ElGamal':
            return {
                'bit_strength': 80,
                'key_size': 1024,
                'quantum_resistant': False,
                'hard_problem': 'Discrete Logarithm Problem (DLP)'
            }
        else:
            return {
                'bit_strength': 0,
                'key_size': 0,
                'quantum_resistant': False,
                'hard_problem': 'Unknown'
            }

    def show_security_info(self):
        from Rabin.rabin import encrypt
        from ECC.utils import transform_msg
        from ELGamal.utils import encode_message

        algorithms = ['Rabin', 'ECC', 'ElGamal']
        funcs = {
            'Rabin': encrypt,
            'ECC': transform_msg,
            'ElGamal': encode_message
        }

        simplicity = [self.evaluate_simplicity(funcs[name]) for name in algorithms]
        flexibility = [self.evaluate_flexibility(funcs[name]) for name in algorithms]
        security_data = [self.evaluate_security(name) for name in algorithms]

        bit_strengths = [data['bit_strength'] for data in security_data]
        key_sizes = [data['key_size'] for data in security_data]
        summary_text = (
    "üîπ Rabin –º–∞—î –Ω–∞–π–º–µ–Ω—à—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥ —Ç—Ä—å–æ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –∑–∞–≤–¥—è–∫–∏ –ø—Ä–æ—Å—Ç–æ—Ç—ñ –∫–æ–¥—É, –Ω–∏–∑—å–∫—ñ–π —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–Ω—ñ–π "
    "—Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º. –ô–æ–≥–æ –≥–Ω—É—á–∫—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, –∞–ª–µ –≤—ñ–Ω "
    "–∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∏—Å–æ–∫—É –∫—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å –ø—Ä–∏ –≤–µ–ª–∏–∫–∏—Ö —Ä–æ–∑–º—ñ—Ä–∞—Ö –∫–ª—é—á—ñ–≤ (2048 –±—ñ—Ç).\n\n"
    
    "üîπ ECC (–µ–ª—ñ–ø—Ç–∏—á–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è) –º–∞—î –ø–æ–º—ñ—Ä–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–ø–∞—Ä–∞—Ç. –í–æ–¥–Ω–æ—á–∞—Å –≤–æ–Ω–∞ "
    "—î –¥—É–∂–µ –≥–Ω—É—á–∫–æ—é ‚Äî –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç–∏–ø–∏ –∫—Ä–∏–≤–∏—Ö, –ø–æ–ª—è —Ç–∞ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏. –ü—Ä–∏ —Ü—å–æ–º—É ECC –∑–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞–π–≤–∏—â—É –∫—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å "
    "—Å–µ—Ä–µ–¥ —É—Å—ñ—Ö —Ç—Ä—å–æ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –Ω–µ–≤–µ–ª–∏–∫–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ –∫–ª—é—á–∞ (256 –±—ñ—Ç).\n\n"
    
    "üîπ ElGamal –º–∞—î –Ω–∞–π–≤–∏—â—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à –æ–±‚Äô—î–º–Ω–æ–≥–æ —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ–≥–æ –∫–æ–¥—É. –ü—Ä–æ—Ç–µ –≤—ñ–Ω –Ω–∞–π–±—ñ–ª—å—à –≥–Ω—É—á–∫–∏–π ‚Äî "
    "–ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–º—ñ–Ω—É –±–∞–≥–∞—Ç—å–æ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —Ç–∞–∫–∏—Ö —è–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≥—Ä—É–ø–∞ —Ç–æ—â–æ. –ô–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å –Ω–∏–∂—á–∞ –∑–∞ ECC —ñ Rabin –ø—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —É–º–æ–≤–∞—Ö, "
    "–æ—Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–≤—à–∏—Ö –∫–ª—é—á—ñ–≤ (–∑–∞–∑–≤–∏—á–∞–π 1024 –±—ñ—Ç–∏) –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Å—Ö–æ–∂–æ–≥–æ —Ä—ñ–≤–Ω—è –±–µ–∑–ø–µ–∫–∏."
)
        # Set up layout: 3 plots in row + 1 text block below
        fig = plt.figure(figsize=(15, 10))
        gs = gridspec.GridSpec(2, 3, height_ratios=[4, 1.2])  # more space to plots, less to text

        # Plot 1: Simplicity
        ax1 = fig.add_subplot(gs[0, 0])
        ax1.bar(algorithms, simplicity, color='skyblue')
        ax1.set_title("–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        ax1.set_ylabel("–Ü–Ω–¥–µ–∫—Å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ")
        ax1.grid(axis='y')

        # Plot 2: Flexibility
        ax2 = fig.add_subplot(gs[0, 1])
        ax2.bar(algorithms, flexibility, color='lightgreen')
        ax2.set_title("–ì–Ω—É—á–∫—ñ—Å—Ç—å")
        ax2.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤")
        ax2.grid(axis='y')

        # Plot 3: Security
        ax3 = fig.add_subplot(gs[0, 2])
        ax3.bar(algorithms, bit_strengths, color='salmon')
        ax3.set_title("–ö—Ä–∏–ø—Ç–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å")
        ax3.set_ylabel("–ë—ñ—Ç–∏ –±–µ–∑–ø–µ–∫–∏")
        ax3.grid(axis='y')

        # Summary Text Block
        ax_text = fig.add_subplot(gs[1, :])
        ax_text.axis('off')
        ax_text.text(0.5, 0.5, summary_text, ha='center', va='center', wrap=True, fontsize=10, family='monospace')

        # Move everything upward
        fig.subplots_adjust(top=0.93, bottom=0.08, hspace=0.5)
        fig.suptitle("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤", fontsize=16)
        plt.show()

        
            # SINGLE TEXT BLOCK
        ax_text = fig.add_subplot(gs[1, :])
        ax_text.axis('off')
        ax_text.text(0.5, 0.5, summary_text, ha='center', va='center', wrap=True, fontsize=10, family='monospace')

        fig.suptitle("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤", fontsize=16)
        plt.tight_layout(rect=[0, 0, 1, 0.95])
        plt.show()

    def show_ecc_info(self):
        self.ecc_window = QWidget()
        self.ecc_window.setWindowTitle("–ü—Ä–æ ECC")
        layout = QVBoxLayout()
        label = QLabel(
            "<h3>–ü—Ä–æ ECC (–µ–ª—ñ–ø—Ç–∏—á–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è)</h3>"
            "<b>1. –£ —á–æ–º—É –≤—ñ–¥–º—ñ–Ω–Ω—ñ—Å—Ç—å –≤—ñ–¥ RSA, Rabin, ElGamal?</b><br>"
            "ECC –±–∞–∑—É—î—Ç—å—Å—è –Ω–µ –Ω–∞ —Ç–µ–æ—Ä—ñ—ó —á–∏—Å–µ–ª, –∞ –Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç–æ—á–æ–∫"
            "–Ω–∞ –µ–ª—ñ–ø—Ç–∏—á–Ω–∏—Ö –∫—Ä–∏–≤–∏—Ö. –¶–µ –¥–æ–∑–≤–æ–ª—è—î –¥–æ—Å—è–≥–∞—Ç–∏ —Ç—ñ—î—ó –∂ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∏ –∑–Ω–∞—á–Ω–æ –º–µ–Ω—à–∏—Ö –∫–ª—é—á–∞—Ö.<br><br>"
            "<b>2. –Ø–∫—ñ –ø–µ—Ä–µ–≤–∞–≥–∏?</b><br>"
            "- –ú–µ–Ω—à—ñ –∫–ª—é—á—ñ: ECC-256 ‚âà RSA-3072 –∑–∞ —Ä—ñ–≤–Ω–µ–º –±–µ–∑–ø–µ–∫–∏<br>"
            "- –®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤<br>"
            "- –ú–µ–Ω—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º º—è—Ç—ñ<br><br>"
            "<b>3. –ù–∞—Å–∫—ñ–ª—å–∫–∏ —Å–∫–ª–∞–¥–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è?</b><br>"
            "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è ECC —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –∑–∞ RSA —á–∏ Rabin, –±–æ –ø–æ—Ç—Ä–µ–±—É—î –∑–Ω–∞–Ω—å —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –∫—Ä–∏–≤—ñ–π, "
            "–æ–±—á–∏—Å–ª–µ–Ω—å —É –ø–æ–ª—è—Ö —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –≤–∏–ø–∞–¥–∫–∞–º–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏—Ö —Ç–æ—á–æ–∫.<br><br>"
            "<b>4. –£ —è–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—è—Ö –≤–∏–≥—Ä–∞—î –∞–±–æ –ø—Ä–æ–≥—Ä–∞—î?</b><br>"
            "ECC –≤–∏–≥—Ä–∞—î —É –º–æ–±—ñ–ª—å–Ω–∏—Ö, –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö, –¥–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∫–ª—é—á—ñ–≤ —ñ —à–≤–∏–¥–∫—ñ—Å—Ç—å.<br>"
            "–ü—Ä–æ–≥—Ä–∞—î —Ç–∞–º, –¥–µ —î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–±–æ –¥–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º —î RSA.<br>"
        )
        label.setWordWrap(True)
        layout.addWidget(label)
        self.ecc_window.setLayout(layout)
        self.ecc_window.resize(600, 400)
        self.ecc_window.show()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
